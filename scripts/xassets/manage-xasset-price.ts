import { ethers, upgrades } from "hardhat";
import {parseUnits} from "ethers/lib/utils";
import {BigNumber} from "ethers";
import {ERC20, FarmFixedRiskWallet, XAssetBase, XAssetBaseV2} from "../../typechain";
import hre = require("hardhat");
import {timeout} from "../../test/helpers/utils";
import axios from "axios";
import {XAssetModel} from "../utils/XAsset";

const BASE_URL = 'https://farm-xyz-backend.master.d.com.ro';

const DAY_START = 19294;

const xAssetConfigs:{ [key: string] : {
        farmAddress: string,
        paybackPeriods: number[]
    } } = {
    '0xA4DAB08d963eaa5011FEA3a34f91066401C9FBb7': {
        farmAddress: '0x8f27AfAa99475E6D9622883d420010cD399fd289',
        paybackPeriods: [60.51648075079451,63.814909633885215,65.05087787145347,65.37246998602731,66.45731620396336,66.42630095782556,67.06326244208132,66.80589026662608,65.78468216648135,67.2675431727664,69.74540812753627,73.94854297350668,74.77987223332568,76.86814064089484,75.01863027918117,71.34415271556982,70.30682512405188,68.11519165208875,65.51275738444751,66.45888166991632,66.55248982882554,66.63941789751492,67.0098685731168,65.88876500398744,66.18153650363162,66.88949536445406,67.18378093575011,67.11522928152911,68.92434785385574,72.31983680162774,69.89028610130444,67.01970754014236,69.94860037937804,71.62304397473551,76.48084417066583,75.90420654195745,75.63953107762869,79.34717348591063,76.23869937009276,75.61435031158382,75.29703733927913,72.57600850879068,68.83645069881128,71.77691547121174,74.88782733336635,75.9841717198392,76.29991063513174,76.1835370087514,78.37847487257326,77.92993611995749,78.02848966370688,77.75157233396428,79.6638577508958,80.1539684532527,79.51144190614131,79.8988281128187,81.16082444773956,81.09232371182806,82.2021123030927,82.17678338043149,82.56066423448479,83.31435018140917,81.04572077206375,83.20032325796497,80.06246270849557,77.41096124901767,74.7422607046031,75.71975285528707,75.55545498137253,74.33488483833372,73.68684723681932,74.1903392448593,74.45855905821087,75.79507830295063,74.8862919432826,74.56414655148558,74.74698498515512,72.04595909020587,72.41877131026571,72.01329000434974,71.05983098286363,70.93478073511157,72.05127995652559,70.72777940276293,67.7280228948287,67.62823971611908,67.80905823538392,67.96733711997452,69.29947477474195,70.32634379878719,69.60620947731312,68.29075647031901,68.2086655846111,68.43244086247559,68.48810829458792,68.6239092481391,69.44329916040434,69.7955040014575,70.5450860950248,70.7580194173424,71.61682944683147,71.72197321101577,70.28321339869603,70.60378022100552,71.28233921910468,71.66698841983457,71.82295649981737,73.01383578770162,73.22142530034654,71.87349393057268,72.81867637451721,73.64448857109551,76.04059669817605,79.68155291222007,79.86227617200251,81.21886057522148,77.97726338087135,79.20522084906605,79.36073423719915,81.08007969554909,82.00818381523284,82.13424179630573,80.26363612100545,78.34662917342428,81.31629320418472,80.27316926116859,85.1284763019875,90.74500546629743,92,89.14680854578808,87.11948828653892,88.9208132846047,92,92,89.44302535730867,83.51450931317248,80.08876986223845,85.32535524176919,85.77483217530015,80.434944553697,79.61374404401809,76.14473308189329,77.11063177851692,76.7913247203392,78.01961182555934,77.33869503812295,80.74202399159215,77.81108222089246,76.35386795218413,80.26073369352898,80.65563101096055,82.14868038535354,83.56615218488442,82.8625099141532,81.26587356694925,81.5224388033599,83.2095416276265,83.09783357035192,84.66422199136076,88.12039933950831,87.11077021678575,85.93815251893395,82.68239021386435,79.9700814230554,74.09256456189968,80.42267786833146,79.00104784219133,77.91598696248819,75.79323930792026,78.18623401159171,77.62309108226974,80.41236734491612,78.37381687682907,82.08466117384307,77.37771508516182,80.66576747383579,76.69432804766407,79.69315986023527,83.5552353285062,78.88647196113513,73.5937553232299,75.77242985053059,70.48800306404002,69.26727871973566,66.6819440619968,66.88796770829109,66.09917502039073,62.36387183684623,63.632294682034235,63.2664097377659,62.81311507431052,59.15484878912336,63.8917743784313,61.33552521246954,62.99951881055018,61.485568292075406,60.33911396653438,60.45870984862732,58.188936880020805,58.540207948727456,57.95890221149631,57.055133339786444,57.150237001848076,56.87988617953521,58.40962023470494,61.77381476054177,63.62525825163779,61.89027428996007,61.50858948107418,61.86280719265668,64.45360113031745,63.10817601540287,64.3411160203725,65.23855100820113,63.71909217832596,63.1071760638369,65.84997024861,65.847133602148,64.64900710757459,66.35445520094325,66.85472429950701,63.98431551918169,61.29688195056428,61.58386378699207,60.447694221376054,63.395177289174725,60.361481672432326,56.08713226863895,50.95749912921182,53.3171663214592,56.340929572046676,55.95297763208215,58.660185007693045,59.257132726220114,56.84983243116694,61.18059475987996,63.30029827721919,60.92029938840333,59.25429648630676,62.34267336704082,63.45733388481606,59.30725054470068,65.56613226601544,66.0323193905239,68.88202636102335,69.59110705207715,74.3219158897022,72.10173115375515,76.12242248379003,80.68422872343716,77.63041514776334,78.61180175773309,76.86938186251595,75.71792234798966,70.24254920380612,69.78874473000072,75.70099109418493,72.68047270655705,76.98035320923913,74.4554288723068,79.4702398452761,86.43152098205339,85.56453154553972,85.00374562843454,85.6431461487304,84.85663804282518,78.17269073900636,82.147209925595,77.27556645725028,78.73073860526691,75.68922032352958,81.2462373033906,82.90429345379273,80.67929430567301,79.0538219959312,76.49346587497487,75.75557389656437,77.22828377665506,75.42105090447114,74.36754161761836,77.45492384978324,78.05067205337905,79.88770580940773,82.9976468973929,86.13914147654813,86.89493563780388,85.15489735280774,86.06315832746003,86.5022535853791,85.50583999842202,87.4519372976417,90.80709329234652,89.46663059983817,86.78666957380285,89.05169825787785,89.19576349231853,84.63695976283718,80.39506849001438,78.57348655664755,83.07794087062942,79.87074179079572,73.27131007177861,69.11754607460831,69.07669097901518,71.48686903212021,70.16988314884746,70.54302056271159,69.73506103343897,66.77980226532246,69.14541155246711,75.38758142349661,80.29135386859855,76.22637073863963,79.34300220366733,84.36742764923224,88.10314502879399,86.63313930444362,85.8076350702649,89.10388901074373,91.92380212518714,92,89.01523274096023,83.51054911029769,87.57929031972475,92,92,86.36519944443688,80.7251132530188,79.23830015584919,82.8557249849193,82.71002368485149,83.50024130498628,85.93682354281175,87.68696569676234,87.81877471161017,84.72564337215444,83.86494421797774,83.34320783997721,84.32561457767459,83.2644688299242,84.73540082917532,81.4825793948864,79.74590761363886,78.64036936429342,78.66127580145519,81.90830945183941,80.96568966410987,82.10722945309098,82.53516872974694,81.72672011110132,81.96959047392738,82.67314387788514,81.30133989285325,79.88305332286225,79.11604439121201,79.17770957419255,79.28572109293012,81.3806768359198,84.80680382125134,86.43767612473277,91.69698460086828,91.76889405941222,89.18981284913262,91.04271811138088,92],
    },
    '0x96Dc31182A70006F32e3abb7e85242CDe25ca7Ec': {
        farmAddress: '0x5E4Ab66973208db6de170B86ceBAc49B355f3BFd',
        paybackPeriods: [59.84391245506037,64.9603218608924,62.51018464993264,65.93097298984698,59.29191685627501,59.60381016272167,60.18310343236874,58.51233803559443,53.51883311509956,51.00320476046615,47.421418245634364,49.737599891057314,49.41330779800814,50.75378222698226,49.2792973902461,51.499707638964395,53.53419684489013,50.85873278901772,52.931354790433716,48.067445467784474,45.24034031162644,46.752555104141734,45.57077690027483,44.84191029972634,45.1576328441048,44.84482148516374,45.87453585021269,44.69454343239061,46.84821083893167,47.97516202823427,51.56970622808762,55.72237636988667,54.5078087050705,51.32176602477011,53.35481101751902,55.055671488589454,55.36632900509367,56.63857718744228,56.360962558078626,55.36688459120536,55.28333672928553,57.97807758194268,58.08689223427798,58.72138416138546,58.16569490999779,54.49360585803718,56.24577975169336,54.232948499379496,55.21409196871153,51.29413612433956,54.07384119204679,51.70913690434194,45.32882613623172,48.524962436649446,50.503299296999856,48.58483616787457,50.220670068838814,50.29819308556057,50.54149672145263,50.84849704118822,49.91270979617781,50.05295733174379,50.24827289321159,49.971363196552815,48.531542382975985,45.852229451988705,43.246704195623366,42.92471867953029,40.62052988238838,41.01456259038317,41.49149832989377,42.34582874990614,40.0542400268877,36.96429364788247,34.64628684967309,31,33.18136273271862,35.89079191323328,36.11013053701926,37.45000810169165,36.8654687491709,37.78086714352538,37.95305712422361,37.31821412175431,37.47914835325032,37.75878031134355,37.54199493663552,37.891186882831114,39.069937453239774,39.740765514118756,37.983185163099414,37.65264153862911,40.06189887373674,39.40955438185589,38.09933237659961,36.760184216913984,38.68030987716203,44.39826598775489,41.41512642124128,40.327950650941496,36.56144534172404,32.76782260462587,34.92973524916383,35.22052175050882,36.440565298107146,41.654333942331824,37.41638606553983,36.518019597698434,31.86179230484914,31,31,31,31,32.06157076827012,34.17072024250802,32.33613284330644,35.137208457304666,31,31.386557262141785,31,32.62538131830448,35.704540163491004,37.800620710946674,43.393274189312976,47.61929572112674,48.59825719515023,46.76485288165393,46.3559852228068,45.22634797135266,45.53106523907655,45.7148248903169,45.026212361465554,45.22425967492866,45.27151026512349,44.430988213751135,45.59241300522596,44.30798103839079,44.685873409375176,42.160886022158785,42.85949632592896,43.21228004130625,48.63968449501108,46.09033187396687,43.12806805499649,44.943541171092065,46.98454164605027,48.77420643900854,49.12412265482529,51.82259845936821,50.427877554033856,47.90284922871617,48.79426786128412,43.95537900434474,44.39482079474726,42.63887469746998,40.1375788103542,44.20082394926549,40.20274217989815,33.60079010199233,31.976487337357014,36.39567869774035,37.8379240657767,34.442496056994955,40.867154384168806,42.061632283296646,40.80652025340165,38.40802635093562,32.825266297383116,37.498746290809315,34.45581377549523,31,36.10417446007619,31.853537467029458,32.99587812927468,31,31.64451095342333,31,33.00791720197211,38.18493195451439,36.221095520612884,37.58530035535778,33.961337831186775,31,31,31,31,31,31,31,37.4247591462389,36.68864797669492,33.053774325270574,31,31.043551156381085,31.637640574864218,34.542939019970966,37.03634320520759,36.52832722174159,39.663122760799645,38.4857447249552,43.42060012474675,41.07712194655765,35.41118898314337,31,31,31,35.61338573453722,38.10424002343812,35.69495773240759,31.239167530467753,31.09715458790368,31.898027486561087,31,31,31,34.935354413198674,31,31,31,31,31,31.04341597825094,31.218616869950967,32.51512776926903,33.143408319583195,35.294559950319346,32.85001664409979,31,31,31,31,31,32.9151089619348,35.37288712576741,32.2758012682039,31,31,33.91160639007977,34.867344104547264,33.66341947501352,40.31156465610241,44.86313449840151,39.13020007285936,40.810510762434596,38.47853948493857,41.24032844805291,42.070512407978086,42.89525409631564,39.328346308943566,40.54907300512128,40.74555310887884,40.00265791467522,39.48268106103197,39.10012053777863,35.5046735723913,35.42181622555729,39.178751313787664,39.09783938637713,39.35846856670912,40.27014195040665,40.84825334974423,41.00018352036294,41.6566202930503,42.006155353616194,41.68885970538561,43.73868555261187,45.515915041376566,49.700264667352286,47.31883863045086,46.13323369559887,40.219402314267924,46.480417041461145,50.284321369504696,45.206011348050254,45.55420030017643,49.66472604015605,45.80391321911602,48.16147811586491,44.72129421843294,49.3502030181862,52.45989109713667,52.71221977691939,58.55579536903762,58.66334396224614,62.64737440051669,59.022309485472,58.11123267194601,59.29692003705165,59.16280784242966,58.09520258845868,54.07183998837292,52.22608025400166,51.63444776969049,55.19913916236807,54.90529081874016,52.75119846881869,56.17887530960189,50.11862507926957,44.01295165695639,38.34075232755869,35.18150170802361,38.85467325477165,36.8308069195532,32.06497343388158,31,31,31.89672077653229,34.518920654088355,40.16980989760606,34.818746775011505,31,37.8849457540723,41.70805454541512,38.53509990053086,39.76779000468777,39.65734451794792,46.28302592853882,47.522362869592065,44.66568917728998,49.339878312412644,52.0803602689052,47.372663282743396,48.14998643376765,47.536889411369216,43.56450618862475,43.82396539823664,44.729420898893906,45.48188792553362,47.37450928014921,45.8974974837074,42.35642476217598,43.76835925848097,43.96078041756918,45.00525562988639,47.72352210763663,42.93067755739274,48.492046393280546,45.47875535692818,45.63837458608229,43.27794189763774,49.09022396015676,50.71638820060763,49.28126295931589,51.36419748076472,48.120846591053954,52.90595288600922,55.85739058104515,51.83674917372811,54.20382735272061,56.95454502289823,57.591521952898844,53.714639511208134,53.34587090327997,53.803639227253456,51.14832042410555,54.282532322528105,57.92014734360689,55.87654960990776,59.481509487022244,52.784100838262695,55.50418148495965,54.27792557933134,56.2902455537043,55.55563938109049,50.32570810299991]
    }
}

// <editor-fold desc="Generate random data">

function getRandomData(numPoints:number, center:number,
                       min:number, max:number,
                       cycles:{ length: number, variance: number,
                                noise: number, trend: number,
                                phase: number,
                                increment: number }[])
{
    let result = [];
    let phase = Math.random() * Math.PI;
    let y = center;

    function randomPlusMinus() { return (Math.random() * 2) - 1; }

    cycles.forEach((thisCycle) => {
        thisCycle.phase = Math.random() * Math.PI;
        thisCycle.increment = Math.PI / thisCycle.length;
    });

    for (let i = 0; i < numPoints; i++)
    {
        cycles.forEach((thisCycle) => {
            thisCycle.phase += thisCycle.increment * randomPlusMinus();
            y += (Math.sin(thisCycle.phase) * (thisCycle.variance / thisCycle.length) * (randomPlusMinus() * thisCycle.noise)) + (thisCycle.trend / thisCycle.length);
        });
        if (min) y = Math.max(y,min);
        if (max) y = Math.min(y,max);
        result.push(y);
    }

    return result;
}

let data = getRandomData(365,62,31,93,
    [{ length: 7, variance: 50, noise: 1, trend: 0, phase: 0, increment: 0 },
        { length: 365, variance: 30, noise: 1, trend: 0, phase: 0, increment: 0},
        { length: 700, variance: 2, noise: 0, trend: 100, phase: 0, increment: 0}]);

// </editor-fold>


let xAssetList:XAssetModel[] = [];

async function readXAssets() {
    let xAssetsListResponse;
    try {
        xAssetsListResponse = await axios.get(BASE_URL + '/api/v1/xasset/list');
        console.log(xAssetsListResponse.data.data.items);
        for (let xAssetData of xAssetsListResponse.data.data.items) {
            let x = XAssetModel.fromDbData(xAssetData);

            xAssetList.push(x);
        }
    } catch (e:any) {
        if (e && e.response !== undefined) {
            console.error("[][] Could not fetch xAssets list from backend: ", e, e.response.data);
        } else {
            console.error("[] Could not fetch xAssets list from backend: ", e);
        }
    }
}

async function main() {
    const [ owner ] = await ethers.getSigners();

    await readXAssets();

    const FarmFixedRiskWallet = await ethers.getContractFactory("FarmFixedRiskWallet");

    const updatePeriodsForAllXAssets = async () => {
        let time = new Date().getTime();
        let day = Math.floor(time / 86400000) - DAY_START;
        let dayTime = time % 86400000;
        let dayTimePercent = dayTime / 86400000;
        console.log("Day: ", day, " Day time: ", dayTime, " Day time percent: ", dayTimePercent);
        for (let xAsset of xAssetList) {
            const xAssetConfig = xAssetConfigs[xAsset.address];
            const todayPrice = xAssetConfig.paybackPeriods[day];
            const tomorrowPrice = xAssetConfig.paybackPeriods[day + 1];
            const currentTarget = todayPrice + ((tomorrowPrice - todayPrice) * dayTimePercent);
            let price = BigNumber.from((currentTarget* 86400000).toFixed(0));
            console.log("Should update price in Farm ", xAssetConfig.farmAddress, ": ", currentTarget, " val: ", price.toString());
            let farm = await FarmFixedRiskWallet.connect(owner).attach(xAssetConfigs[xAsset.address].farmAddress);
            const tx = await farm.setPaybackPeriod(price);
            console.log("Tx hash: ", tx.hash);
        }
    };

    await updatePeriodsForAllXAssets();

    let interval = setInterval(updatePeriodsForAllXAssets, 5 * 60000);

    //
    // const oldAddress = '0x0416fD0A193b5a0BE3d26e733039A85c21B58637';
    // const XAssetBase = await ethers.getContractFactory("XAssetBase");
    // const XAssetBaseV2 = await ethers.getContractFactory("XAssetBaseV2");
    //
    //
    // console.log("Upgrading XAssetBase contract at", oldAddress);
    // const oldContract = await upgrades.forceImport(oldAddress, XAssetBase, { kind: "uups" });
    // let xassetProxy = await upgrades.upgradeProxy(oldAddress, XAssetBaseV2, {kind: "uups"});
    // console.log("XAsset Upgraded", xassetProxy.address);
    //
    // (await xassetProxy as XAssetBaseV2).setAcceptedPriceDifference(1000);
    // console.log("Accepted price difference set to 1000");
    //
    // await timeout(60000);
    //
    // console.log("Verifying up XAssetBase...");
    // await hre.run("verify:verify", {
    //     address: xassetProxy.address
    // });
    // console.log("XAssetBase verified.");
}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main().catch((error) => {
    console.error(error);
    process.exitCode = 1;
});
